from datetime import datetime, timedelta
from aiogram.types import Message, InputFile
from aiogram import Router
from aiogram.filters import Command

from config import Config
import glob
import os

from services.video import run_command, cleanup_old_files
dp = Router()

@dp.message(Command("video"))
async def cmd_get_video(message: Message):
    try:
        now = datetime.now()
        threshold = now - timedelta(minutes=Config.BUFFER_DURATION)

        # –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        segments = []
        for path in glob.glob(f"{Config.TEMP_DIR}/*.mp4"):
            filename = os.path.basename(path)
            try:
                dt = datetime.strptime(filename, "%Y%m%d%H%M%S.mp4")
            except ValueError:
                continue
            if dt >= threshold:
                segments.append((dt, path))
        if not segments:
            return await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –≤—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤
        segments.sort()
        video_files = [path for _, path in segments]

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        list_file = os.path.join(Config.TEMP_DIR, "concat.txt")
        with open(list_file, "w") as f:
            for file in video_files:
                f.write(f"file '{os.path.basename(file)}'\n")
        output_file = os.path.join(Config.TEMP_DIR, "output.mp4")
        success = await run_command([
            "ffmpeg",
            "-y",
            "-f", "concat",
            "-safe", "0",
            "-i", list_file,
            "-c", "copy",
            output_file
        ])
        if not success:
            return await message.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await message.reply_video(
            video=InputFile(output_file),
            caption="üé• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã:"
        )

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        os.remove(list_file)
        os.remove(output_file)
        await cleanup_old_files(threshold)

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")